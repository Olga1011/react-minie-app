{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/olgacovali/vidly/src/components/movies.jsx\";\nimport React, { Component } from \"react\";\nimport { getMovies } from \"../services/fakeMovieService\";\nimport MoviesTable from \"./moviesTable\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utilities/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport { getGenres } from \"../services/fakeGenreService\";\nimport { Link } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport SearchBox from \"./searchBox\";\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      genres: [],\n      currentPage: 1,\n      pageSize: 4,\n      // searchQuery: \"\",\n      selectedGenre: null,\n      sortColumn: {\n        path: \"title\",\n        order: \"asc\"\n      }\n    };\n\n    this.handleDelete = movie => {\n      const movies = this.state.movies.filter(m => m._id !== movie._id);\n      this.setState({\n        movies\n      });\n    };\n\n    this.handleLike = movie => {\n      const movies = this.state.movies;\n      const index = movies.indexOf(movie);\n      movies[index] = { ...movies[index]\n      };\n      movies[index].liked = !movies[index].liked;\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreSelect = genre => {\n      this.setState({\n        selectedGenre: genre,\n        searchQuery: \"\",\n        currentPage: 1\n      });\n    };\n\n    this.handleSearch = query => {\n      this.setState({\n        searchQuery: query,\n        selectGenre: null,\n        currentPage: 1\n      });\n    };\n\n    this.handleSort = sortColumn => {\n      this.setState({\n        sortColumn\n      });\n    };\n\n    this.getPagedData = () => {\n      const {\n        currentPage,\n        pageSize,\n        selectedGenre,\n        searchQuery,\n        sortColumn,\n        movies: allMovies\n      } = this.state;\n      const filtered = allMovies;\n      if (searchQuery) filtered = allMovies.filter(m => m.title.toLowerCase().startWith(searchQuery.toLowerCase()));else if (selectedGenre && selectedGenre._id) filtered = allMovies.filter(m => m.genre._id === selectedGenre._id);\n\n      const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n      const movies = paginate(sorted, currentPage, pageSize);\n      return {\n        totalCount: filtered.length,\n        data: movies\n      };\n    };\n  }\n\n  componentDidMount() {\n    const genres = [{\n      _id: \"\",\n      name: \"All Genres\"\n    }, ...getGenres()];\n    this.setState({\n      movies: getMovies(),\n      genres\n    });\n  }\n\n  render() {\n    const {\n      length: count\n    } = this.state.movies;\n    const {\n      currentPage,\n      pageSize,\n      sortColumn\n    } = this.state;\n\n    if (count === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-italic text-danger\",\n        children: \"There is no movies in the database.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this);\n    }\n\n    const {\n      totalCount,\n      data: movies\n    } = this.getPagedData();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-3\",\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            items: this.state.genres,\n            onItemSelect: this.handleGenreSelect.bind(this),\n            selectedItem: this.state.selectedGenre\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"./movies/new\",\n            className: \"btn btn-primary\",\n            style: {\n              marginBottom: 20\n            },\n            children: \"New Movie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Showing \", totalCount, \" movies in the database. \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n            value: searchQuery,\n            onChange: this.handleSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MoviesTable, {\n            movies: movies,\n            sortColumn: sortColumn,\n            onLike: this.handleLike,\n            onDelete: this.handleDelete,\n            onSort: this.handleSort\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Pagination, {\n          itemsCount: totalCount,\n          pageSize: pageSize,\n          onPageChange: this.handlePageChange,\n          currentPage: currentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["/Users/olgacovali/vidly/src/components/movies.jsx"],"names":["React","Component","getMovies","MoviesTable","Pagination","paginate","ListGroup","getGenres","Link","_","SearchBox","Movies","state","movies","genres","currentPage","pageSize","selectedGenre","sortColumn","path","order","handleDelete","movie","filter","m","_id","setState","handleLike","index","indexOf","liked","handlePageChange","page","handleGenreSelect","genre","searchQuery","handleSearch","query","selectGenre","handleSort","getPagedData","allMovies","filtered","title","toLowerCase","startWith","sorted","orderBy","totalCount","length","data","componentDidMount","name","render","count","bind","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { getMovies } from \"../services/fakeMovieService\";\nimport MoviesTable from \"./moviesTable\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utilities/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport { getGenres } from \"../services/fakeGenreService\";\nimport { Link } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport SearchBox from \"./searchBox\";\n\nclass Movies extends Component {\n  state = {\n    movies: [],\n    genres: [],\n    currentPage: 1,\n    pageSize: 4,\n    // searchQuery: \"\",\n    selectedGenre: null,\n    sortColumn: { path: \"title\", order: \"asc\" },\n  };\n\n  handleDelete = (movie) => {\n    const movies = this.state.movies.filter((m) => m._id !== movie._id);\n    this.setState({ movies });\n  };\n\n  componentDidMount() {\n    const genres = [{ _id: \"\", name: \"All Genres\" }, ...getGenres()];\n    this.setState({ movies: getMovies(), genres });\n  }\n\n  handleLike = (movie) => {\n    const movies = this.state.movies;\n    const index = movies.indexOf(movie);\n    movies[index] = { ...movies[index] };\n    movies[index].liked = !movies[index].liked;\n    this.setState({ movies });\n  };\n\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page });\n  };\n\n  handleGenreSelect = (genre) => {\n    this.setState({ selectedGenre: genre, searchQuery: \"\", currentPage: 1 });\n  };\n\n  handleSearch = (query) => {\n    this.setState({ searchQuery: query, selectGenre: null, currentPage: 1 });\n  };\n\n  handleSort = (sortColumn) => {\n    this.setState({ sortColumn });\n  };\n  getPagedData = () => {\n    const {\n      currentPage,\n      pageSize,\n      selectedGenre,\n      searchQuery,\n      sortColumn,\n      movies: allMovies,\n    } = this.state;\n\n    const filtered = allMovies;\n    if (searchQuery)\n      filtered = allMovies.filter((m) =>\n        m.title.toLowerCase().startWith(searchQuery.toLowerCase())\n      );\n    else if (selectedGenre && selectedGenre._id)\n      filtered = allMovies.filter((m) => m.genre._id === selectedGenre._id);\n\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n    const movies = paginate(sorted, currentPage, pageSize);\n    return { totalCount: filtered.length, data: movies };\n  };\n\n  render() {\n    const { length: count } = this.state.movies;\n    const { currentPage, pageSize, sortColumn } = this.state;\n\n    if (count === 0) {\n      return (\n        <p className=\"font-italic text-danger\">\n          There is no movies in the database.\n        </p>\n      );\n    }\n\n    const { totalCount, data: movies } = this.getPagedData();\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-3\">\n            <ListGroup\n              items={this.state.genres}\n              onItemSelect={this.handleGenreSelect.bind(this)}\n              selectedItem={this.state.selectedGenre}\n            />\n          </div>\n\n          <div className=\"col\">\n            <Link\n              to=\"./movies/new\"\n              className=\"btn btn-primary\"\n              style={{ marginBottom: 20 }}\n            >\n              New Movie\n            </Link>\n            <p>Showing {totalCount} movies in the database. </p>\n            <SearchBox value={searchQuery} onChange={this.handleSearch} />\n            <MoviesTable\n              movies={movies}\n              sortColumn={sortColumn}\n              onLike={this.handleLike}\n              onDelete={this.handleDelete}\n              onSort={this.handleSort}\n            />\n          </div>\n        </div>\n\n        <div>\n          <Pagination\n            itemsCount={totalCount}\n            pageSize={pageSize}\n            onPageChange={this.handlePageChange}\n            currentPage={currentPage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}