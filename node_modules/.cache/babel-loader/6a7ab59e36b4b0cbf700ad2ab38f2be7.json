{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/olgacovali/vidly/src/components/movies.jsx\";\nimport React, { Component } from \"react\";\nimport { getMovies } from \"../services/movieService\";\nimport MoviesTable from \"./moviesTable\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utilities/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport { getGenres } from \"../services/genreService\";\nimport { Link } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport SearchBox from \"./searchBox\";\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      genres: [],\n      currentPage: 1,\n      pageSize: 4,\n      searchQuery: \"\",\n      selectedGenre: null,\n      sortColumn: {\n        path: \"title\",\n        order: \"asc\"\n      }\n    };\n\n    this.handleDelete = async movie => {\n      const originalMovies = this.state.movies;\n      const movies = originalMovies.filter(m => m._id !== movie._id);\n      this.setState({\n        movies\n      });\n    };\n\n    this.handleLike = movie => {\n      const movies = this.state.movies;\n      const index = movies.indexOf(movie);\n      movies[index] = { ...movies[index]\n      };\n      movies[index].liked = !movies[index].liked;\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreSelect = genre => {\n      this.setState({\n        selectedGenre: genre,\n        searchQuery: \"\",\n        currentPage: 1\n      });\n    };\n\n    this.handleSearch = query => {\n      this.setState({\n        searchQuery: query,\n        selectedGenre: null,\n        currentPage: 1\n      });\n    };\n\n    this.handleSort = sortColumn => {\n      this.setState({\n        sortColumn\n      });\n    };\n\n    this.getPagedData = () => {\n      const {\n        currentPage,\n        pageSize,\n        selectedGenre,\n        searchQuery,\n        sortColumn,\n        movies: allMovies\n      } = this.state;\n      let filtered = allMovies;\n      if (searchQuery) filtered = allMovies.filter(m => m.title.toLowerCase().startsWith(searchQuery.toLowerCase()));else if (selectedGenre && selectedGenre._id) filtered = allMovies.filter(m => m.genre._id === selectedGenre._id);\n\n      const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n      const movies = paginate(sorted, currentPage, pageSize);\n      return {\n        totalCount: filtered.length,\n        data: movies\n      };\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      data\n    } = await getGenres();\n    const genres = [{\n      _id: \"\",\n      name: \"All Genres\"\n    }, ...data];\n    const {\n      data: movies\n    } = await getMovies();\n    this.setState({\n      movies,\n      genres\n    });\n  }\n\n  render() {\n    const {\n      length: count\n    } = this.state.movies;\n    const {\n      currentPage,\n      pageSize,\n      sortColumn\n    } = this.state;\n\n    if (count === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-italic text-danger\",\n        children: \"There is no movies in the database.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this);\n    }\n\n    const {\n      totalCount,\n      data: movies,\n      searchQuery\n    } = this.getPagedData();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-3\",\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            items: this.state.genres,\n            onItemSelect: this.handleGenreSelect.bind(this),\n            selectedItem: this.state.selectedGenre\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"./movies/new\",\n            className: \"btn btn-primary\",\n            style: {\n              marginBottom: 20\n            },\n            children: \"New Movie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Showing \", totalCount, \" movies in the database. \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n            value: searchQuery,\n            onChange: this.handleSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MoviesTable, {\n            movies: movies,\n            sortColumn: sortColumn,\n            onLike: this.handleLike,\n            onDelete: this.handleDelete,\n            onSort: this.handleSort\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Pagination, {\n          itemsCount: totalCount,\n          pageSize: pageSize,\n          onPageChange: this.handlePageChange,\n          currentPage: currentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["/Users/olgacovali/vidly/src/components/movies.jsx"],"names":["React","Component","getMovies","MoviesTable","Pagination","paginate","ListGroup","getGenres","Link","_","SearchBox","Movies","state","movies","genres","currentPage","pageSize","searchQuery","selectedGenre","sortColumn","path","order","handleDelete","movie","originalMovies","filter","m","_id","setState","handleLike","index","indexOf","liked","handlePageChange","page","handleGenreSelect","genre","handleSearch","query","handleSort","getPagedData","allMovies","filtered","title","toLowerCase","startsWith","sorted","orderBy","totalCount","length","data","componentDidMount","name","render","count","bind","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { getMovies } from \"../services/movieService\";\nimport MoviesTable from \"./moviesTable\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utilities/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport { getGenres } from \"../services/genreService\";\nimport { Link } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport SearchBox from \"./searchBox\";\n\nclass Movies extends Component {\n  state = {\n    movies: [],\n    genres: [],\n    currentPage: 1,\n    pageSize: 4,\n    searchQuery: \"\",\n    selectedGenre: null,\n    sortColumn: { path: \"title\", order: \"asc\" },\n  };\n\n  handleDelete = async (movie) => {\n    const originalMovies = this.state.movies;\n    const movies = originalMovies.filter((m) => m._id !== movie._id);\n    this.setState({ movies });\n  };\n\n  async componentDidMount() {\n    const { data } = await getGenres();\n    const genres = [{ _id: \"\", name: \"All Genres\" }, ...data];\n\n    const { data: movies } = await getMovies();\n    this.setState({ movies, genres });\n  }\n\n  handleLike = (movie) => {\n    const movies = this.state.movies;\n    const index = movies.indexOf(movie);\n    movies[index] = { ...movies[index] };\n    movies[index].liked = !movies[index].liked;\n    this.setState({ movies });\n  };\n\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page });\n  };\n\n  handleGenreSelect = (genre) => {\n    this.setState({ selectedGenre: genre, searchQuery: \"\", currentPage: 1 });\n  };\n\n  handleSearch = (query) => {\n    this.setState({ searchQuery: query, selectedGenre: null, currentPage: 1 });\n  };\n\n  handleSort = (sortColumn) => {\n    this.setState({ sortColumn });\n  };\n  getPagedData = () => {\n    const {\n      currentPage,\n      pageSize,\n      selectedGenre,\n      searchQuery,\n      sortColumn,\n      movies: allMovies,\n    } = this.state;\n\n    let filtered = allMovies;\n    if (searchQuery)\n      filtered = allMovies.filter((m) =>\n        m.title.toLowerCase().startsWith(searchQuery.toLowerCase())\n      );\n    else if (selectedGenre && selectedGenre._id)\n      filtered = allMovies.filter((m) => m.genre._id === selectedGenre._id);\n\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n    const movies = paginate(sorted, currentPage, pageSize);\n    return { totalCount: filtered.length, data: movies };\n  };\n\n  render() {\n    const { length: count } = this.state.movies;\n    const { currentPage, pageSize, sortColumn } = this.state;\n\n    if (count === 0) {\n      return (\n        <p className=\"font-italic text-danger\">\n          There is no movies in the database.\n        </p>\n      );\n    }\n\n    const { totalCount, data: movies, searchQuery } = this.getPagedData();\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-3\">\n            <ListGroup\n              items={this.state.genres}\n              onItemSelect={this.handleGenreSelect.bind(this)}\n              selectedItem={this.state.selectedGenre}\n            />\n          </div>\n\n          <div className=\"col\">\n            <Link\n              to=\"./movies/new\"\n              className=\"btn btn-primary\"\n              style={{ marginBottom: 20 }}\n            >\n              New Movie\n            </Link>\n            <p>Showing {totalCount} movies in the database. </p>\n            <SearchBox value={searchQuery} onChange={this.handleSearch} />\n            <MoviesTable\n              movies={movies}\n              sortColumn={sortColumn}\n              onLike={this.handleLike}\n              onDelete={this.handleDelete}\n              onSort={this.handleSort}\n            />\n          </div>\n        </div>\n\n        <div>\n          <Pagination\n            itemsCount={totalCount}\n            pageSize={pageSize}\n            onPageChange={this.handlePageChange}\n            currentPage={currentPage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}